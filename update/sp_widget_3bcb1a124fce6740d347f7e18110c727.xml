<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($http,$rootScope,$uibModal) {
	var c = this;

	//Pagination variables
	c.data.currentPage = 1;
	c.data.totalItems = c.data.record_count;
	c.data.itemsPerPage = c.options.record_limit;
	c.data.maxSize = 5;

	$rootScope.$on('categorySelected', function (event,data) {
		c.data.isLoading = true;
		c.data.records = [];
		if (data != '') {
			getRecords(c.record_query + '^category=' + data);
			getRecordCount(c.record_query + '^category=' + data);
		}
		else {
			getRecords(c.record_query);
			getRecordCount(c.record_query);
		}
	});

	function recordOffset () {
		return c.data.currentPage * c.data.itemsPerPage - c.data.itemsPerPage;
	}

	function getRecords (query) {
		c.data.isLoading = true;
		c.data.records = [];
		$http({
			method: 'GET',
			url: '/api/now/table/x_wegu_er_instance',
			params: {
				sysparm_fields: 'number,name,instructor,category,location,thumbnail,description,registered_user_count,capacity,full,start,end,registered_users,wait_list,public_participant_list,sys_id',
				sysparm_display_value: 'all',
				sysparm_exclude_reference_link: true,
				sysparm_query: query || c.record_query,
				sysparm_limit: c.options.record_limit,
				sysparm_offset: recordOffset()
			}
		}).then(function(r) {
			var result = r.data.result;

			for (var i = 0; i < result.length; i++) {
				c.data.records.push(normalizeRecord(result[i]));
			}
			c.data.isLoading = false;
		});
	}
	
	function getRecordCount (query) {
		$http({
			method: 'GET',
			url: '/api/now/stats/x_wegu_er_instance',
			params: {
				sysparm_query: query || c.record_query,
				sysparm_count: true
			}
		}).then(function(r) {
			c.data.totalItems = r.data.result.stats.count;
		});
	}

	function normalizeRecord (recordObj) {
		recordObj.start.prettified = moment(recordObj.start.display_value, 'yyyy-MM-DD hh:mm:ss').format('MM/DD/YY h:mm z');
		recordObj.end.prettified = moment(recordObj.end.display_value, 'yyyy-MM-DD hh:mm:ss').format('MM/DD/YY h:mm z');

		if (recordObj.public_participant_list.display_value == 'true') {
			recordObj.participants = recordObj.registered_users.display_value.split(',');
		}

		if (recordObj.registered_users.value != '') {
			var registered_users = recordObj.registered_users.value.split(',');
			if (registered_users.indexOf(c.data.userID) > -1) {
				recordObj.isRegistered = true;
			}
		}

		if (recordObj.wait_list.value != '') {
			var wait_list = recordObj.wait_list.value.split(',');
			if (wait_list.indexOf(c.data.userID) > -1) {
				recordObj.isWaitList = true;
			}
		}

		if (recordObj.isRegistered) {
			recordObj.action = 'cancel';
			recordObj.action_title = 'Cancel Registration';
		}
		else if (recordObj.isWaitList) {
			recordObj.action = 'cancel';
			recordObj.action_title = 'Leave Wait List';
		}
		else if (recordObj.full.display_value == 'true') {
			recordObj.action = 'register';
			recordObj.action_title = 'Join Wait List';
		}
		else {
			recordObj.action = 'register';
			recordObj.action_title = 'Register';
		}

		return recordObj;
	}

	c.pageChange = function () {
		getRecords();
	}

	c.registrationAction = function (record) {
		var index = _.findIndex(c.data.records, record);
		record.isLoading = true;
		c.server.get({
			action: record.action,
			recordID: record.sys_id.value
		}).then(function (r) {
			c.data.records[index] = normalizeRecord(r.data.record);
		});
	}

	c.openModal = function (record) {
		c.modalInstance = $uibModal.open({
			templateUrl: 'record-modal.html',
			controllerAs: 'modalC',
			controller: function () {
				var modalC = this;
				modalC.record = record;
				modalC.modalInstance = c.modalInstance;
				modalC.registrationAction = function () {
					c.registrationAction(record);
					c.modalInstance.close();
				};
			},
			size: 'lg'
		});
	}

	//Initial page load
	if (!c.data.records.length) {
		c.record_query = c.options.record_query;
		$rootScope.$emit('getFilter', c.record_query);
		getRecords();
		getRecordCount();
	}

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-heading h3 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: normal;
}

dt::after {
  content: ":";
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>events</id>
        <internal>false</internal>
        <link/>
        <name>Event List</name>
        <option_schema>[{"name":"record_limit","section":"Data","default_value":"12","label":"Record Limit","type":"integer"},{"name":"record_query","section":"other","label":"Record Query","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.userID = gs.getUserID();

	if (!input) {
		data.records = [];

		var gr = new GlideRecordSecure('x_wegu_er_instance');
		gr.addEncodedQuery(options.record_query);
		gr.query();
		data.record_count = gr.getRowCount();
	}
	if (input) {
		if (input.action == 'register') {
			data.record = register(input.recordID);
		}
		else if (input.action == 'cancel') {
			data.record = cancel(input.recordID);
		}
	}

	function getRecord (recordID) {
		var gr = new GlideRecord('x_wegu_er_instance');
		gr.get(recordID);
		var obj = {};
		$sp.getRecordElements(obj, gr,'number,name,instructor,category,location,thumbnail,description,registered_user_count,capacity,full,start,end,registered_users,wait_list,public_participant_list,sys_id');
		return obj
	}


	function register (recordID) {
		var gr = new GlideRecord('x_wegu_er_registration');
		gr.addQuery('event_instance', recordID);
		gr.addQuery('user', data.userID);
		gr.query();

		if (gr.next()) {
			gr.setValue('registration_status', 'Pending Approval');
			gr.update();
		}
		else {
			gr.newRecord();
			gr.setValue('event_instance', recordID);
			gr.setValue('user', data.userID);
			gr.insert();
		}
		return getRecord(recordID);
	}

	function cancel (recordID) {
		var gr = new GlideRecord('x_wegu_er_registration');
		gr.addQuery('event_instance', recordID);
		gr.addQuery('user', data.userID);
		gr.query();

		if (gr.next()) {
			gr.setValue('registration_status', 'Cancelled');
			gr.update();
		}
		return getRecord(recordID);
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>dan.ostler</sys_created_by>
        <sys_created_on>2018-11-30 15:48:47</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3bcb1a124fce6740d347f7e18110c727</sys_id>
        <sys_mod_count>316</sys_mod_count>
        <sys_name>Event List</sys_name>
        <sys_package display_value="Event Registration" source="x_wegu_er">e5e80da84fd9e340d347f7e18110c713</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Event Registration">e5e80da84fd9e340d347f7e18110c713</sys_scope>
        <sys_update_name>sp_widget_3bcb1a124fce6740d347f7e18110c727</sys_update_name>
        <sys_updated_by>dan.ostler</sys_updated_by>
        <sys_updated_on>2018-12-06 19:49:00</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default">
  <div class="panel-body">

    <div class="row"
         style="margin-top: 5px;padding-top:5px;"
         ng-if="c.data.isLoading == true">
      <p class="text-center">
        <fa class="fa-spinner fa-spin fa-2x fa-fw"></fa>
        Loading..
      </p>
    </div>

    <div vertilize-container 
         class="row"
         ng-if="c.data.isLoading == false">
      <div ng-repeat="record in c.data.records | orderBy: ['isRegistered','isWaitList','start.value'] track by record.sys_id.value"
           class="col-xs-12 col-sm-6 col-md-4">
        <div ng-class="[
                       {'panel panel-primary': record.isRegistered == true},
                       {'panel panel-info': record.isWaitList && !record.isRegistered},
                       {'panel panel-default':!record.isWaitList && !record.isRegistered}
                       ]">
          <div class="panel-heading">
            <h3 class="panel-title">
              {{ record.name.display_value }}
            </h3>
          </div>
          <div vertilize
               class="panel-body text-muted"
               ng-click="c.openModal(record)">
            <img ng-src="{{ record.thumbnail.display_value}}?t=small"
                 ng-if="record.thumbnail.display_value != ''"
                 alt="{{ record.name.display_value }}"
                 class="m-r-sm m-b-sm item-image pull-right"/>
            <dl>
              <dt>Start</dt>
              <dd>{{ record.start.prettified }}</dd>
              <dt>End</dt> 
              <dd>{{ record.end.prettified }}</dd>
              <dt>Instructor</dt>
              <dd>{{ record.instructor.display_value }}</dd>
              <dt>Location</dt>
              <dd>{{ record.location.display_value }}</dd>
              <dt>
                <span class="glyphicon glyphicon-user user-icon"></span>
              </dt>
              <dd>
                {{ record.registered_user_count.display_value }}
                <span ng-if="record.capacity.display_value != ''">
                  /
                  {{ record.capacity.display_value }}
                </span>
              </dd>
            </dl>
          </div>
          <div class="panel-footer clearfix">
            <div popover-trigger="mouseenter"
                 popover-placement="top"
                 popover-popup-close-delay="250"
                 uib-popover="{{ record.action_message }}"
                 style="display:inline-block;"
                 class="pull-right">
              <button type="button" class="btn btn-sm" 
                      ng-class="[
                                {'btn-danger': record.action == 'cancel'},
                                {'btn-primary': record.action == 'register'}
                                ]" 
                      ng-disabled="record.isLoading" 
                      ng-click="c.registrationAction(record)">
                {{ record.action_title }}
                <span ng-show="record.isLoading">
                  <fa class="fa-spinner fa-spin fa-fw"></fa>
                </span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="row text-center">
        <div class="col-sm-12 col-md-12 col-lg-12">
          <ul uib-pagination
              total-items="c.data.totalItems"
              items-per-page="c.data.itemsPerPage"
              max-size="c.data.maxSize"
              ng-model="c.data.currentPage"
              ng-change="c.pageChange()"
              class="pagination-md"></ul>
        </div>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
